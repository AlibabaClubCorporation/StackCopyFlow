Запуск:
	- Скопировать корневой каталог
	- Установить зависимости ( Зависимости в requirements.txt )
	- С корневого каталога запустить сервер командой: python manage.py runserver
	

Функционал:

	Первое ( Не реализованно ) :
		- Пользователя, скорее всего CustomUser наследовать от AbsractUser, и в качестве определения ( Клиент || Пользователь клиента ) ...
		  ... использовать BolleanField
		
		- Модели Question, Answer и необходимое для их; Создания, Чтения, Изменения, Удаления

	Второе ( Не реализованно ) :
		- Реализация "Голосования"

		- ...

Заметки:

	- Использовать mptt, скорее всего для реализации древовидной системы ответов

	- Один класс представления - одно действие

	- Поработать с модель User, точнее с её расширением 

	- В сериализатарах не должно быть логики, если методы save, create, to_represantasion переопределяются - это плохо

	- Должен быть сериализатор как для получения информации, так и для отдачи информации

	- Избавиться от нижних подчеркиваний в классах

	- Не использовать не явный импорт

	- Использовать исключительно английские комментарии

	- Нет необходимости расписывать очевидные вещи

	- Правильная структура проекта, ( manage.py в корне проекта )

	- Файлы .gitignore , requirements.txt

	- Правильные названия для моделей

	- Не использовать slug`и

	- Сервисы более глобальны, чем их использовал я	
			






